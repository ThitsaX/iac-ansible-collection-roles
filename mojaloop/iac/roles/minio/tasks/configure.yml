---
# configure

- name: "Check if mc is installed"
  stat:
     path: "{{ minio_work_dir }}/mc"
  changed_when: false
  failed_when: false
  register: mc_installed

- name: Wait minio healthcheck api to respond
  uri:
    url: http://{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}:9000/minio/health/live
    method: GET
  register: _result
  until: _result.status == 200
  retries: 30
  delay: 10 # Every 10 seconds

- name: "Install minio client"
  get_url:
    url: "{{ minio_client_download_url }}"
    dest: "{{ minio_work_dir }}/mc"
    mode: 0700
  when: not mc_installed.stat.exists

- name: "Create minio alias"
  command: "{{ minio_work_dir }}/mc alias set infitx-minio http://{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}:9000 {{ minio_root_user }} {{ minio_root_password }}"

- name: "Check if user is created with policy"
  shell: '{{ minio_work_dir }}/mc admin user info infitx-minio {{ gitlab_minio_user }} --quiet --json'
  register: mc_gitlab_user_info
  ignore_errors: true

- set_fact:
    mc_gitlab_access_policy: "{{ mc_gitlab_user_info.stdout | from_json | json_query('policyName') }}"


- name: "Create minio user for gitlab"
  command: "{{ minio_work_dir }}/mc admin user add infitx-minio {{ gitlab_minio_user }} {{ gitlab_minio_secret }}"

- name: "Copy policy.json"
  template:
    src: policy.json
    dest: /tmp/policy.json
    owner: root
    group: root

- name: "Create access policy for gitlab"
  command: "{{ minio_work_dir }}/mc admin policy create infitx-minio gitlab-access-policy /tmp/policy.json"


- name: "Attacth policy to gitlab user"
  command: "{{ minio_work_dir }}/mc admin policy attach infitx-minio gitlab-access-policy --user {{ gitlab_minio_user }}"
  when: mc_gitlab_access_policy != 'gitlab-access-policy'

- name: Create empty buckets for gitlab
  command: "{{ minio_work_dir }}/mc mb infitx-minio/{{ item }} --ignore-existing"
  with_items: "{{ minio_create_bucket_list }}"

# Setup bucket for mimir

- name: "Fetch mimir user"
  shell: '{{ minio_work_dir }}/mc admin user info infitx-minio {{ mimir_minio_user }} --quiet --json'
  register: mimir_minio_user_info
  ignore_errors: true

- set_fact:
    mimir_minio_user_policy: "{{ mimir_minio_user_info.stdout | from_json | json_query('policyName') }}"


- name: "Create minio user for mimir"
  command: "{{ minio_work_dir }}/mc admin user add infitx-minio {{ mimir_minio_user }} {{ mimir_minio_password }}"

# policy source: # https://github.dev/mojaloop/iac-ansible-collection-roles/blob/main/mojaloop/iac/roles/minio/tasks/configure.yml
- name: "Copy mimir policy.json"
  template:
    src: mimir-policy.json.j2
    dest: /tmp/mimir-policy.json
    owner: root
    group: root

- name: "Create access policy for mimir"
  command: "{{ minio_work_dir }}/mc admin policy create infitx-minio mimir-access-policy /tmp/mimir-policy.json"


- name: "Attach policy to mimir user"
  command: "{{ minio_work_dir }}/mc admin policy attach infitx-minio mimir-access-policy --user {{ mimir_minio_user }}"
  when: mimir_minio_user_policy != 'mimir-access-policy'

- name: "Create empty bucket for mimir"
  command: "{{ minio_work_dir }}/mc mb infitx-minio/{{ mimir_minio_bucket }} --ignore-existing"

- name: "Create lifecyle rule for mimir bucket"
  command: "{{ minio_work_dir }}/mc ilm rule add --expire-days {{ mimir_data_expiry_days }} infitx-minio/{{ mimir_minio_bucket }} "


