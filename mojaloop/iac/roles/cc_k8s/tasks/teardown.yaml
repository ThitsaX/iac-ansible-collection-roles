- name: Tear down ceph cluster
  shell: |
    export KUBECONFIG={{ kubeconfig_location }}/kubeconfig
    kubectl config set-context --current --namespace {{ fact_argocd_helm_namespace }}
    argocd app set --source-position 1  rook-ceph --sync-policy none
    argocd app terminate-op root-deployer --grpc-web
    argocd app terminate-op rook-ceph --grpc-web
    kubectl -n {{ fact_rook_ceph_namespace }} scale deployment rook-ceph-operator --replicas=0
    for CRD in $(kubectl get crd -n {{ fact_rook_ceph_namespace }} | awk '/ceph.rook.io/ {print $1}'); do kubectl get -n {{ fact_rook_ceph_namespace }} "$CRD" -o name | xargs -I {} kubectl patch -n {{ fact_rook_ceph_namespace }} {} --type merge -p '{"metadata":{"finalizers": []}}';done
    kubectl -n {{ fact_rook_ceph_namespace }} delete cephobjectstore ceph-objectstore cephfilesystem ceph-filesystem cephblockpool ceph-blockpool
    kubectl -n {{ fact_rook_ceph_namespace }} delete cephcluster

- name: Delete resources before infra teardown
  shell: |
    export KUBECONFIG={{ kubeconfig_location }}/kubeconfig
    kubectl patch application -n {{ fact_argo_merged_config.namespace }} root-deployer --type json --patch='[ { "op": "remove", "path": "/spec/syncPolicy/automated" } ]' || true
    kubectl patch application -n {{ fact_argo_merged_config.namespace }} vault-post-config --type json --patch='[ { "op": "remove", "path": "/spec/syncPolicy/automated" } ]' || true
    kubectl patch application -n {{ fact_argo_merged_config.namespace }} gitlab-pre --type json --patch='[ { "op": "remove", "path": "/spec/syncPolicy/automated" } ]' || true
    kubectl patch application -n {{ fact_argo_merged_config.namespace }} zitadel-pre --type json --patch='[ { "op": "remove", "path": "/spec/syncPolicy/automated" } ]' || true
    kubectl delete workspaces.tf.upbound.io vault-{{ cluster_cloud_provider }}-post-config
    kubectl delete workspaces.tf.upbound.io vault-post-config
    kubectl delete dbinstanceclaim -n {{ fact_argo_merged_config.apps['gitlab'].sub_apps['gitlab'].namespace }} --ignore-not-found=true --all
    kubectl delete dbinstanceclaim -n {{ fact_argo_merged_config.apps['security'].sub_apps['zitadel'].namespace }} --ignore-not-found=true --all
  args:
    executable: /bin/bash
# - name: Wait for vault to be gone
#   shell: |  
#     export KUBECONFIG={{ kubeconfig_location }}/kubeconfig
#     kubectl patch workspace netbird-pre-config --type json --patch='[ { "op": "remove", "path": "/metadata/finalizers" } ]' || true
#     kubectl patch workspace zitadel-post-config --type json --patch='[ { "op": "remove", "path": "/metadata/finalizers" } ]' || true
#     kubectl patch workspace zitadel-argocd-oidc-config --type json --patch='[ { "op": "remove", "path": "/metadata/finalizers" } ]' || true
#     kubectl patch workspace zitadel-vault-oidc-config --type json --patch='[ { "op": "remove", "path": "/metadata/finalizers" } ]'  || true
#     export zitadel_pvcs=$(kubectl get pvcs -n zitadel --no-headers -o custom-columns=":metadata.name") || true
#     for n in $zitadel_pvcs; do kubectl patch -n zitadel pvc $n --type json --patch='[ { "op": "remove", "path": "/metadata/finalizers" } ]' ; done || true
#     kubectl patch workspace vault-post-config --type json --patch='[ { "op": "remove", "path": "/metadata/finalizers" } ]' || true
#     kubectl --kubeconfig {{ kubeconfig_location }}/kubeconfig get application -n {{ fact_argo_merged_config.namespace }} vault
#   register: outputapp
#   until: outputapp is failed
#   retries: 100
#   delay: 30
#   ignore_errors: true
