- name: Find argocd app install status
  shell: kubectl --kubeconfig {{ kubeconfig_location }}/kubeconfig -n {{ fact_argocd_helm_namespace }} wait --for=jsonpath='{.status.health.status}'=Healthy --timeout=1m application/{{ fact_argocd_helm_release }}
  register: argocdappexists
  ignore_errors: true

- name: Install argocd
  shell: |
    export KUBECONFIG={{ kubeconfig_location }}/kubeconfig
    helm repo add argo https://argoproj.github.io/argo-helm
    helm repo update
    helm upgrade --install {{ fact_argocd_helm_release }} argo/argo-cd --create-namespace --namespace {{ fact_argocd_helm_namespace }} --version {{ fact_argocd_helm_version }} \
      --set fullnameOverride={{ fact_argocd_helm_release }} \
      --set applicationSet.enabled=false \
      --set notifications.enabled=false \
      --set dex.enabled=false \
      --values {{ cctmpvalues.path }}/argocd/argocd-values.yaml
    kubectl -n {{ fact_argocd_helm_namespace }} rollout status deployment/{{ fact_argocd_helm_release }}-server
  when: argocdappexists is failed

- name: Install root app
  shell: |
    export KUBECONFIG={{ kubeconfig_location }}/kubeconfig
    kubectl apply -f {{ cctmpvalues.path }}/argocd/root-app.yaml

- name: Install utils and wait for argocd autosync
  shell: |
    export KUBECONFIG={{ kubeconfig_location }}/kubeconfig
    export ARGOCD_PWD=$(kubectl -n {{ fact_argocd_helm_namespace }} get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
    until argocd login --core --username admin --password $ARGOCD_PWD --insecure; do :; done
    kubectl config set-context --current --namespace={{ fact_argocd_helm_namespace }}
    until argocd app sync {{ fact_argocd_helm_release }}; do echo "awaiting argocd to sync..." && sleep 10; done
    kubectl -n {{ fact_argocd_helm_namespace }} rollout status deployment/{{ fact_argocd_helm_release }}-repo-server
  args:
    executable: /bin/bash

- name: wait for netbird-management autosync
  shell: |
    export KUBECONFIG={{ kubeconfig_location }}/kubeconfig
    kubectl -n {{ fact_netbird_namespace }} rollout status deployment/netbird-management
  register: outputnetbird
  until: outputnetbird is not failed
  retries: 100
  delay: 30
  ignore_errors: true
  args:
    executable: /bin/bash

- name: join bastion to netbird
  shell: |
    export KUBECONFIG={{ kubeconfig_location }}/kubeconfig
    netbird up -m https://netbird.{{ fact_dns_public_subdomain }}:443 -k $(kubectl -n {{ fact_netbird_namespace }} get secret {{ fact_netbird_token_secret_name }} -o jsonpath="{.data.{{ fact_netbird_token_secret_key }}}" | base64 -d)
