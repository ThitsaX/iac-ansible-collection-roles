#Create a temporary directory for storing values files or other config
- name: install kubectl
  get_url:
    url: https://storage.googleapis.com/kubernetes-release/release/v{{ kubectl_version }}/bin/linux/amd64/kubectl
    dest: /usr/local/bin/kubectl
    mode: 0700

- name: install kustomize
  get_url:
    url: https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/v{{ kustomize_version }}/kustomize_kustomize.v{{ kustomize_version }}_linux_amd64
    dest: /usr/local/bin/kustomize
    mode: 0700

- name: Create temporary directory for cc boot
  tempfile:
    state: directory
    suffix: values
  register: cctmpvalues

- name: "create directory for kubeconfig"
  file:
    path: "{{ kubeconfig_location }}"
    state: directory
    recurse: yes

- name: "create directory for rook git repo"
  file:
    path: "{{ rook_gitrepo_location }}"
    state: directory
    recurse: yes

- name: copy kubeconfig
  copy:
    src: "{{ kubeconfig_local_location }}/kubeconfig"
    dest: "{{ kubeconfig_location }}/kubeconfig"
    mode: "0600"

- name: apply node labels
  shell: |
    kubectl --kubeconfig {{ kubeconfig_location }}/kubeconfig label --overwrite nodes {{ item.node_name }} {% for labels in lookup('dict', item.node_labels, wantlist=True) %} {{ labels.key }}={{ labels.value }}{% endfor %}
  loop: "{{ node_pool_labels }}"
  when: node_pool_labels is defined

- name: apply node taints
  shell: |
    kubectl --kubeconfig {{ kubeconfig_location }}/kubeconfig taint --overwrite nodes {{ item.node_name }} {% for taints in lookup('dict', item.node_taints, wantlist=True) %} {{ taints.value }}{% endfor %}
  loop: "{{ node_pool_taints }}"
  when: node_pool_taints is defined

- name: Upload cc bootstrap files
  template:
    src: "templates/{{ item }}.yaml.j2"
    dest: "{{ cctmpvalues.path }}/{{ item }}.yaml"
  with_items:
    - rook-ceph-cluster-values
    - cockroach-db-values
    - zitadel-cert-job
    - zitadel-values
    - netbird-values
    - lets-encrypt-cluster-issuer
    - ext-dns-values
    - ext-dns-crs
    - istio-istiod-values
    - istio-base-values
    - istio-internal-ingress-gateway-values
    - istio-external-ingress-gateway-values
    - istio-gateway-crs
    - vitrual-services

- name: Install utils
  shell: |
    export KUBECONFIG={{ kubeconfig_location }}/kubeconfig
    helm repo add ember https://emberstack.github.io/helm-charts
    helm upgrade --install reflector ember/reflector --version {{ reflector_helm_version }} -n reflector --create-namespace --set nameOverride=reflector
    helm repo add istio https://istio-release.storage.googleapis.com/charts
    helm upgrade --install istio-base istio/base --version {{ istio_helm_version }} -n {{ istio_namespace }} --create-namespace --values {{ cctmpvalues.path }}/istio-base-values.yaml
    helm upgrade --install istio-istiod istio/istiod --version {{ istio_helm_version }} -n {{ istio_namespace }} --create-namespace --values {{ cctmpvalues.path }}/istio-istiod-values.yaml
    helm upgrade --install int-gateway istio/gateway --version {{ istio_helm_version }} -n {{ istio_internal_gateway_namespace }} --create-namespace --values {{ cctmpvalues.path }}/istio-internal-ingress-gateway-values.yaml
    helm upgrade --install ext-gateway istio/gateway --version {{ istio_helm_version }} -n {{ istio_external_gateway_namespace }} --create-namespace --values {{ cctmpvalues.path }}/istio-external-ingress-gateway-values.yaml
    helm repo add cert-manager https://charts.jetstack.io
    helm upgrade --install cert-manager cert-manager/cert-manager --version {{ certmanager_helm_version }} -n {{ certmanager_namespace }} --create-namespace --set crds.enabled=true
    kubectl -n {{ certmanager_namespace }} apply -f {{ cctmpvalues.path }}/lets-encrypt-cluster-issuer.yaml
    helm repo add bitnami https://charts.bitnami.com/bitnami
    helm upgrade --install external-dns bitnami/external-dns --version {{ external_dns_helm_version }} -n {{ external_dns_namespace }} --create-namespace --values {{ cctmpvalues.path }}/ext-dns-values.yaml
    kubectl -n {{ external_dns_namespace }} create secret generic {{ external_dns_credentials_secret }} --from-file=credentials={{ cctmpvalues.path }}/ext-dns-crs.yaml || true
    kubectl apply -f {{ cctmpvalues.path }}/istio-gateway-crs.yaml

- name: Install rook/ceph
  shell: |
    export KUBECONFIG={{ kubeconfig_location }}/kubeconfig
    helm repo add rook https://charts.rook.io/release
    helm upgrade --install rook-ceph rook/rook-ceph --version {{ rook_ceph_version }} -n {{ rook_ceph_namespace }} --create-namespace --set csi.kubeletDirPath={{ rook_csi_kubelet_dir_path }} --set enableDiscoveryDaemon=true
    helm upgrade --install rook-ceph-cluster rook/rook-ceph-cluster --version {{ rook_ceph_version }} -n {{ rook_ceph_namespace }} --create-namespace --values {{ cctmpvalues.path }}/rook-ceph-cluster-values.yaml

- name: Wait for blockpool
  shell: kubectl --kubeconfig {{ kubeconfig_location }}/kubeconfig get -n {{ rook_ceph_namespace }} CephBlockPool/ceph-blockpool --ignore-not-found | wc -l
  register: blockpoolcount
  until: blockpoolcount is not 0
  retries: 30
  delay: 5

- name: Wait for blockpool to be ready
    kubectl -n {{ rook_ceph_namespace }} wait --for=jsonpath='{.status.phase}'=Ready --timeout=10m CephBlockPool/ceph-blockpool

- name: Install zitadel
  shell: |
    export KUBECONFIG={{ kubeconfig_location }}/kubeconfig
    helm repo add cockroachdb https://charts.cockroachdb.com/
    helm upgrade --install zitadel-db cockroachdb/cockroachdb --version {{ cockroachdb_helm_version }} -n {{ zitadel_namespace }} --create-namespace --values {{ cctmpvalues.path }}/cockroach-db-values.yaml

    # Generate a TLS certificate for the zitadel DB user
    kubectl -n {{ zitadel_namespace }} apply -f {{ cctmpvalues.path }}/zitadel-cert-job.yaml
    kubectl -n {{ zitadel_namespace }} wait --for=condition=complete job/create-zitadel-cert

    # Install ZITADEL
    helm repo add zitadel https://charts.zitadel.com
    helm upgrade --install zitadel zitadel/zitadel --version {{ zitadel_helm_version }} -n {{ zitadel_namespace }} --values {{ cctmpvalues.path }}/zitadel-values.yaml
    kubectl apply -f {{ cctmpvalues.path }}/vitrual-services.yaml

# - name: Install netbird
#   shell: |

#     # install netbird
#     helm repo add jaconi https://charts.jaconi.io
#     helm install netbird jaconi/netbird --version {{ netbird_chart_version }} --values {{ cctmpvalues.path }}/netbird-values.yaml
