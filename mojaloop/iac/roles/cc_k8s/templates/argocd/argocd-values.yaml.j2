global:
  domain: argo.{{ fact_argo_merged_config.apps['utils'].sub_apps['argocd_helm'].dns_public_subdomain }}
  logging:
    format: json
configs:
  cm:
    url: http://argo.{{ fact_argo_merged_config.apps['utils'].sub_apps['argocd_helm'].dns_public_subdomain }}
    exec.enabled: "true"
    kustomize.buildOptions: "--enable-helm --helm-kube-version 1.29-0 --load-restrictor LoadRestrictionsNone"

    # DO NOT USE in production, this is only used to improve reconciliation in testing env.
    timeout.reconciliation: "10s"
    resource.customizations: |
      argoproj.io/Application:
        health.lua: |
          hs = {}
          hs.status = "Progressing"
          hs.message = ""
          if obj.status ~= nil then
            if obj.status.health ~= nil then
              hs.status = obj.status.health.status
              if obj.status.health.message ~= nil then
                hs.message = obj.status.health.message
              end
            end
          end
          return hs
      cert-manager.io/Certificate:
        health.lua: |
          hs = {}
          if obj.status ~= nil then
            if obj.status.conditions ~= nil then
              for i, condition in ipairs(obj.status.conditions) do
                if condition.type == "Ready" and condition.status == "False" then
                  hs.status = "Degraded"
                  hs.message = condition.message
                  return hs
                end
                if condition.type == "Ready" and condition.status == "True" then
                  hs.status = "Healthy"
                  hs.message = condition.message
                  return hs
                end
              end
            end
          end

          hs.status = "Progressing"
          hs.message = "Waiting for certificate"
          return hs
      redhatcop.redhat.io/VaultSecret:
        health.lua: |
          hs = {}
          if obj.status ~= nil then
            if obj.status.conditions ~= nil then
              for i, condition in ipairs(obj.status.conditions) do
                if condition.type == "ReconcileSuccessful" and condition.status == "False" then
                  hs.status = "Degraded"
                  hs.message = condition.message
                  return hs
                end
                if condition.type == "ReconcileSuccessful" and condition.status == "True" then
                  hs.status = "Healthy"
                  hs.message = condition.message
                  return hs
                end
              end
            end
          end

          hs.status = "Progressing"
          hs.message = "Waiting for VaultSecret"
          return hs

      ceph.rook.io/CephBlockPool:
        health.lua: |
          hs = {}
          if obj.status ~= nil then
            if obj.status.phase == "Ready" then
              hs.status = "Healthy"
              hs.message = "CephBlockPool Ready"
              return hs
            end
          end
          hs.status = "Progressing"
          hs.message = "Waiting for CephBlockPool"
          return hs
    # dex.config: |
    #   connectors:
    #     - id: google
    #       name: Google
    #       type: oidc
    #       config:
    #         issuer: https://accounts.google.com
    #         clientID: $dex.client.id # read from argo-secrets
    #         clientSecret: $dex.client.secret # read from argo-secrets
    # extension.config: |-
    #   extensions:
    #     - name: metrics
    #       backend:
    #         services:
    #         - url: http://argocd-metrics-server.argocd.svc.cluster.local:9003

  params:
    server.insecure: true
    # Mandatory for extensions to work
    server.enable.proxy.extension: "true"
  rbac:
    policy.default: role:readonly
    policy.csv: |-
      p, role:readonly, extensions, invoke, metrics, allow
      p, role:admin, extensions, invoke, metrics, allow
  cmp:
    create: true
    plugins:
      envsubst:
        discover:
          fileName: "kustomization.*"
        generate:
          command: ["sh", "-c"]
          args:
            [
              "for f in *.yaml ; do cat $f | envsubst > $f.sub && mv $f.sub $f ; done && kustomize build . --enable-helm --helm-kube-version 1.29-0 --load-restrictor LoadRestrictionsNone > /dev/stdout",
            ]

## RepoServer ##
repoServer:
  # resources:
  #   limits:
  #     cpu: 500m
  #     memory: 1.5Gi
  #   requests:
  #     cpu: 250m
  #     memory: 512Mi

  volumes:
    - name: custom-tools
      emptyDir: {}
    - name: cmp-plugin
      configMap:
        name: argocd-cmp-cm

  initContainers:
    - name: download-tools
      image: golang:1.22.4-alpine3.20
      command: [sh, -c]
      args:
        - apk add git && go install github.com/drone/envsubst/cmd/envsubst@v1.0.3 && mv $GOPATH/bin/envsubst /custom-tools/ && wget -qO yq https://github.com/mikefarah/yq/releases/download/v4.44.2/yq_linux_amd64 && chmod +x yq && mv yq  /custom-tools/
      volumeMounts:
        - mountPath: /custom-tools
          name: custom-tools

  extraContainers:
    - name: debug-tools
      image: quay.io/argoproj/argocd
      command: [sh, -c]
      args:
        - while true; do echo "running"; sleep 300; done
      volumeMounts:
        - mountPath: /var/run/argocd
          name: var-files
        - mountPath: /home/argocd/cmp-server/plugins
          name: plugins
        - mountPath: /tmp
          name: tmp

        # Register plugins into sidecar

        # Important: Mount tools into $PATH
        - name: custom-tools
          subPath: envsubst
          mountPath: /usr/local/bin/envsubst

        - name: custom-tools
          subPath: yq
          mountPath: /usr/local/bin/yq

    - name: envsubst
      command: [/var/run/argocd/argocd-cmp-server]
      image: quay.io/argoproj/argocd
      args: [--loglevel, debug]
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
      volumeMounts:
        - mountPath: /var/run/argocd
          name: var-files
        - mountPath: /home/argocd/cmp-server/plugins
          name: plugins
        - mountPath: /tmp
          name: tmp

        # Register plugins into sidecar
        - mountPath: /home/argocd/cmp-server/config/plugin.yaml
          subPath: envsubst.yaml
          name: cmp-plugin

        # Important: Mount tools into $PATH
        - name: custom-tools
          subPath: envsubst
          mountPath: /usr/local/bin/envsubst

        - name: custom-tools
          subPath: yq
          mountPath: /usr/local/bin/yq
