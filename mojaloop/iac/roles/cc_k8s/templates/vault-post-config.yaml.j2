apiVersion: v1
kind: ConfigMap
metadata:
  name: post-config
data:
  bootstrap.sh: |
    #!/bin/bash
    set -e
    export VAULT_ADDR=http://127.0.0.1:8200
    export VAULT_SKIP_VERIFY=true
    if [ $(vault status -format=json | jq .initialized) == "false" ]
    then
      vault operator init -key-shares=1 -key-threshold=1 -format=json > /tmp/output.json
      export VAULT_ROOT_TOKEN=$(cat /tmp/output.json | jq .root_token | tr -d '"')
      export RECOVERY_KEY=$(cat /tmp/output.json | jq .recovery_keys_b64[0] | tr -d '"')
      if [ $VAULT_ROOT_TOKEN != "" ]
      then
        kubectl create secret -n {{ vault_namespace }} generic vault-keys --from-literal=VAULT_ROOT_TOKEN=$VAULT_ROOT_TOKEN --from-literal=RECOVERY_KEY=$RECOVERY_KEY --save-config --dry-run=client -o yaml | kubectl apply -f 
      else
        echo "VAULT_ROOT_TOKEN not parsed correctly, exiting"
        exit 1
      fi
      if [ $VAULT_ROOT_TOKEN != "" ]
      then
        vault login -no-print $VAULT_ROOT_TOKEN
        cat <<EOT >/tmp/vault-admin-policy.hcl
        path "/*" {
          capabilities = ["create", "read", "update", "delete", "list", "sudo"]
        }
    EOT
        cat <<EOT >/tmp/vault-read-secrets-policy.hcl
        path "${local_vault_kv_root_path}/*" {
          capabilities = ["read", "list"]
        }
    EOT
        vault policy write vault-admin /tmp/vault-admin-policy.hcl
        vault policy write read-secrets /tmp/vault-read-secrets-policy.hcl
        vault auth enable kubernetes
        vault write auth/kubernetes/config kubernetes_host=https://kubernetes.default.svc:443
        vault write auth/kubernetes/role/policy-admin bound_service_account_names=* bound_service_account_namespaces=* policies=vault-admin ttl=600s
        vault secrets enable --path=${local_vault_kv_root_path} kv
        vault secrets tune -default-lease-ttl=2m ${local_vault_kv_root_path}/
        rm /tmp/output.json || true
      else
        echo "no root token found, skipping init"
      fi
    else
      echo "vault already initialized"
    fi